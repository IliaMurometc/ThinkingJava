<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.5.0_01) on Wed Nov 30 13:27:11 MST 2005 -->
<TITLE>
EasyReader
</TITLE>

<META NAME="keywords" CONTENT="edu.colorado.io.EasyReader class">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    parent.document.title="EasyReader";
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;<A HREF="../../../edu/colorado/io/FormatWriter.html" title="class in edu.colorado.io"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?edu/colorado/io/EasyReader.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="EasyReader.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
edu.colorado.io</FONT>
<BR>
Class EasyReader</H2>
<PRE>
java.lang.Object
  <IMG SRC="../../../resources/inherit.gif" ALT="extended by ">java.io.Reader
      <IMG SRC="../../../resources/inherit.gif" ALT="extended by ">java.io.FilterReader
          <IMG SRC="../../../resources/inherit.gif" ALT="extended by ">java.io.PushbackReader
              <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>edu.colorado.io.EasyReader</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD>java.io.Closeable, java.lang.Readable</DD>
</DL>
<HR>
<DL>
<DT><PRE>public class <B>EasyReader</B><DT>extends java.io.PushbackReader</DL>
</PRE>

<P>
The <CODE>EasyReader</CODE> object has a small collection of methods for
 reading some primitive data values from an input stream or file.

 <P><B>Limitations:</B>
 <BR>
 If an <CODE>IOException</CODE> or <CODE>FileNotFoundException</CODE> occurs
 during any  operation, then the
 <CODE>EasyReader</CODE> prints an error message and halts the program.
 The exceptions is not passed back to the calling program,
 so the calling program does not need to catch any exceptions. 

 <P><B>Example:</B>
 <BR>
 This example declares an <CODE>EasyReader</CODE> that is attached to the
 keyboard input (<CODE>System.in</CODE>). It then uses 
 <CODE>doubleQuery</CODE> to ask the user to enter a double number. The
 square of this double number is then printed:
 <CODE>
 <BR>  import edu.colorado.io.EasyReader
 <BR>  ...
 <BR>  EasyReader stdin = new EasyReader(System.in); // Attaches to keyboard
 <BR>  double d;
 <BR>  d = stdin.doubleQuery("Please type a double value: ");
 <BR>  System.out.println("The square of that is: " + d*d);  
 <BR></CODE>

 <dl><dt><b>The <CODE>EasyReader</CODE> class includes:</b>
   <dd>
   (1) Three constructors to create an <CODE>EasyReader</CODE> from an
   <CODE>InputStream</CODE>, from an <CODE>InputStreamReader</CODE>, or from
   a file name. For example, to create an <CODE>EasyReader</CODE> from 
   <CODE>System.in</CODE>:
   <br><code>EasyReader stdin = new EasyReader(System.in);</CODE>
   <dd>
   (2) Query methods: The names of these methods end with "Query".
   Each method prints a prompt (which is a String parameter) and then reads
   one line of input, converting the line to some type (char, double,
   int, or String). All of the query methods reject improperly formatted
   input lines (such as a 1.5 for an integer input). When an input line is
   rejected, the method prompts the user for a correctly formatted input.
   This continues until an input line is typed in the correct format.
   <dd>
   (3) Peek method: This method returns the next character of the input
   without actually reading it.
   <dd>
   (4) Input methods: The names of these methods end with "Input" or
   "InputLine". The methods read input and convert it to some type
   (char, double, int, or String). The "Input" methods just read the
   data, and the "InputLine" methods  read the data and then discard the rest
   of the line.
   <dd>
   (5) Boolean methods: The names of these methods begin with "is". They
   return various information about the input status.
   <dd>
   (6) The methods skipLine and ignore. They
   read and throw away various input.
 </dl>
 
 <dt><b>Java Source Code for this class:</b><dd>
   <A HREF="../../../../edu/colorado/io/EasyReader.java">
   http://www.cs.colorado.edu/~main/edu/colorado/io/EasyReader.java
   </A>
<P>

<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../edu/colorado/io/FormatWriter.html" title="class in edu.colorado.io"><CODE>FormatWriter</CODE></A></DL>
<HR>

<P>

<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#EasyReader(java.io.InputStream)">EasyReader</A></B>(java.io.InputStream&nbsp;in)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initialize this <CODE>EasyReader</CODE> so that it reads from an 
 <CODE>InputStream</CODE>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#EasyReader(java.io.InputStreamReader)">EasyReader</A></B>(java.io.InputStreamReader&nbsp;isr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initialize this <CODE>EasyReader</CODE> so that it reads from an 
 <CODE>InputStreamReader</CODE>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#EasyReader(java.lang.String)">EasyReader</A></B>(java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initialize this <CODE>EasyReader</CODE> so that it reads from a 
 specified file.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;char</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#charInput()">charInput</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read a character from this <CODE>EasyReader</CODE>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;char</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#charInputLine()">charInputLine</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read a character from a complete line of this <CODE>EasyReader</CODE>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;char</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#charQuery(java.lang.String)">charQuery</A></B>(java.lang.String&nbsp;prompt)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Print a prompt, then read and return a character from this 
 <CODE>EasyReader</CODE>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#doubleInput()">doubleInput</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read a <CODE>double</CODE> number from this <CODE>EasyReader</CODE>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#doubleInputLine()">doubleInputLine</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read a double value from a complete line of this <CODE>EasyReader</CODE>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#doubleQuery(java.lang.String)">doubleQuery</A></B>(java.lang.String&nbsp;prompt)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Print a prompt, then read and return a double value from this
 <CODE>EasyReader</CODE>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#ignore()">ignore</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read and discard one character.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#intInput()">intInput</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read an integer from this <CODE>EasyReader</CODE>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#intInputLine()">intInputLine</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read an integer from a complete line of this <CODE>EasyReader</CODE>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#intQuery(java.lang.String)">intQuery</A></B>(java.lang.String&nbsp;prompt)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Print a prompt, then read and return an integer from this
 <CODE>EasyReader</CODE>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#isEOF()">isEOF</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine whether this <CODE>EasyReader</CODE> has reached the 
 end-of-file.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#isEOLN()">isEOLN</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine whether the next input character is an end-of-line.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#isFormatProblem()">isFormatProblem</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine whether there was an incorrectly formatted input to the most
 recent input operation.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#main(java.lang.String[])">main</A></B>(java.lang.String[]&nbsp;args)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A demonstration program.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#pause(long)">pause</A></B>(long&nbsp;milliseconds)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Make the computation pause for a specified number of milliseconds.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;char</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#peek()">peek</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Peek ahead at the next character from this <CODE>EasyReader</CODE>
 (but don't read it).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#query(java.lang.String)">query</A></B>(java.lang.String&nbsp;prompt)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Print a prompt, then read and return a YES/NO answer from this
 <CODE>EasyReader</CODE>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#skipLine()">skipLine</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read and discard the rest of the current input line.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#stringInput()">stringInput</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read a <CODE>String</CODE> (up to whitespace) from this 
 <CODE>EasyReader</CODE>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#stringInputLine()">stringInputLine</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read a <CODE>String</CODE> from a complete line of this 
 <CODE>EasyReader</CODE>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../edu/colorado/io/EasyReader.html#stringQuery(java.lang.String)">stringQuery</A></B>(java.lang.String&nbsp;prompt)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Print a prompt, then read and return a <CODE>String</CODE> from this
 <CODE>EasyReader</CODE>.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.io.PushbackReader"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.io.PushbackReader</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>close, mark, markSupported, read, read, ready, reset, skip, unread, unread, unread</CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.io.Reader"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.io.Reader</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>read, read</CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>equals, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="EasyReader(java.io.InputStream)"><!-- --></A><H3>
EasyReader</H3>
<PRE>
public <B>EasyReader</B>(java.io.InputStream&nbsp;in)</PRE>
<DL>
<DD>Initialize this <CODE>EasyReader</CODE> so that it reads from an 
 <CODE>InputStream</CODE>.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE><CODE>in</CODE></CODE> - an <CODE>InputStream</CODE> that this <CODE>EasyReader</CODE>
   will read from
 <dt><b>Postcondition:</b><dd>
   This <CODE>EasyReader</CODE> has been initialized so that its
   subsequent input comes from the specified <CODE>InputStream</CODE>.
 <dt><b>Example:</b><dd>
   <CODE>EasyReader stdin = new EasyReader(System.in);</CODE></DL>
</DL>
<HR>

<A NAME="EasyReader(java.lang.String)"><!-- --></A><H3>
EasyReader</H3>
<PRE>
public <B>EasyReader</B>(java.lang.String&nbsp;name)</PRE>
<DL>
<DD>Initialize this <CODE>EasyReader</CODE> so that it reads from a 
 specified file.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE><CODE>name</CODE></CODE> - the name of the file that this <CODE>EasyReader</CODE>
   will read from
 <dt><b>Postcondition:</b><dd>
   This <CODE>EasyReader</CODE> has been initialized so that its
   subsequent input comes from the specified file. 
   If the file does not exist, then an error message is printed
   to System.err and the program exits.
 <dt><b>Example:</b><dd>
   <CODE>EasyReader stdin = new EasyReader("foo.txt");</CODE></DL>
</DL>
<HR>

<A NAME="EasyReader(java.io.InputStreamReader)"><!-- --></A><H3>
EasyReader</H3>
<PRE>
public <B>EasyReader</B>(java.io.InputStreamReader&nbsp;isr)</PRE>
<DL>
<DD>Initialize this <CODE>EasyReader</CODE> so that it reads from an 
 <CODE>InputStreamReader</CODE>.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE><CODE>in</CODE></CODE> - an <CODE>InputStreamReader</CODE> that this <CODE>EasyReader<CODE>
   will read from
 <dt><b>Postcondition:</b><dd>
   This <CODE>EasyReader</CODE> has been initialized so that its subsequent
   input comes from the specified <CODE>InputStreamReader</CODE>.</DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="charInput()"><!-- --></A><H3>
charInput</H3>
<PRE>
public char <B>charInput</B>()</PRE>
<DL>
<DD>Read a character from this <CODE>EasyReader</CODE>.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>-</CODE> - none
<DT><B>Returns:</B><DD>a character that's been read
 <dt><b>Note:</b>
   This method reads and throws away whitespace. Then it reads and
   returns the next character. If end-of-file has been reached, then
   it returns ASCII value zero.</DL>
</DD>
</DL>
<HR>

<A NAME="charInputLine()"><!-- --></A><H3>
charInputLine</H3>
<PRE>
public char <B>charInputLine</B>()</PRE>
<DL>
<DD>Read a character from a complete line of this <CODE>EasyReader</CODE>.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>-</CODE> - none
<DT><B>Returns:</B><DD>a character that's been read
 <dt><b>Note:</b><dd>
   This method is indentical <CODE>charInput()</CODE> with an added
   activation of <CODE>skipLine()</CODE> just before returning.</DL>
</DD>
</DL>
<HR>

<A NAME="charQuery(java.lang.String)"><!-- --></A><H3>
charQuery</H3>
<PRE>
public char <B>charQuery</B>(java.lang.String&nbsp;prompt)</PRE>
<DL>
<DD>Print a prompt, then read and return a character from this 
 <CODE>EasyReader</CODE>.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE><CODE>prompt</CODE></CODE> - a prompt to print
 <dt><b>Postcondition:</b><dd>
   The prompt has been printed to <CODE>System.out</CODE>. Then a
   character has been read and returned with <CODE>charInputLine</CODE>.</DL>
</DD>
</DL>
<HR>

<A NAME="doubleInput()"><!-- --></A><H3>
doubleInput</H3>
<PRE>
public double <B>doubleInput</B>()</PRE>
<DL>
<DD>Read a <CODE>double</CODE> number from this <CODE>EasyReader</CODE>.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>-</CODE> - none
<DT><B>Returns:</B><DD>a </CODE>double</CODE> number that's been read
 <dt><b>Input Method:</b>
   <dd>An attempt is made to read the following items into a 
   <CODE>String</CODE>:
   <dd>(1) Zero or more whitespace characters (which are discarded);
   <dd>(2) An optional + or - sign.
   <dd>(3) A sequence of digits that form the integer part of the number.
   <dd>(4) If the next character is a decimal point, then it is read
           along with a sequence of digits that form the fractional part
           of the number.
   <dd>(5) If the next character is 'e' or 'E', then it is read along 
           with an optional +/- sign and digits that form the exponent
           part of the number.
   <dd> After these items, there may be a non-digit delimiter, or the
        end-of-file may appear after the number. The delimiter (or EOF)
        is not read.
 <dt><b>Conversion:</b> The above items are converted to a double value 
   using <CODE>Double.valueOf</CODE>.
 <dt><b>Format Problems:</b><dd>
   If a <CODE>NumberFormatException</CODE>
   occurs, then the method returns <CODE>Double.NaN</CODE> and an immediate
   activation of <CODE>isFormatProblem()</CODE> will return true.</DL>
</DD>
</DL>
<HR>

<A NAME="doubleInputLine()"><!-- --></A><H3>
doubleInputLine</H3>
<PRE>
public double <B>doubleInputLine</B>()</PRE>
<DL>
<DD>Read a double value from a complete line of this <CODE>EasyReader</CODE>.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>-</CODE> - none
<DT><B>Returns:</B><DD>a double value that's been read
 <dt><b>Note:</b><dd>
   This method is identical <CODE>doubleInput( )</CODE> with an added
   activation of <CODE>skipLine( )</CODE> just before returning.</DL>
</DD>
</DL>
<HR>

<A NAME="doubleQuery(java.lang.String)"><!-- --></A><H3>
doubleQuery</H3>
<PRE>
public double <B>doubleQuery</B>(java.lang.String&nbsp;prompt)</PRE>
<DL>
<DD>Print a prompt, then read and return a double value from this
 <CODE>EasyReader</CODE>.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE><CODE>prompt</CODE></CODE> - a prompt to print
 <dt><b>Postcondition:</b><dd>
   The prompt has been printed to <CODE>System.out</CODE>. Then a double
   value has been read and returned with <CODE>doubleInputLine</CODE>.
 <dt><b>Format Problems:</b><dd>
   If <CODE>doubleInputLine</CODE> encounters a format problem, but
   <CODE>!isEOF()</CODE>, then the user is prompted to type a new
   input line until a correct double value is provided. If end-of-file
   is reached, then the method returns <CODE>Double.NaN</CODE> and
   an immediate activation of <CODE>isFormatProblem()</CODE> will return 
   true.</DL>
</DD>
</DL>
<HR>

<A NAME="ignore()"><!-- --></A><H3>
ignore</H3>
<PRE>
public void <B>ignore</B>()</PRE>
<DL>
<DD>Read and discard one character.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>-</CODE> - none
 <dt><b>Postcondition:</b><dd>
   One character has been read and discarded.</DL>
</DD>
</DL>
<HR>

<A NAME="intInput()"><!-- --></A><H3>
intInput</H3>
<PRE>
public int <B>intInput</B>()</PRE>
<DL>
<DD>Read an integer from this <CODE>EasyReader</CODE>.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>-</CODE> - none
<DT><B>Returns:</B><DD>an integer that's been read
 <dt><b>Format:</b>
   <dd>An attempt is made to read the following items into a 
   <CODE>String</CODE>:
   <dd>(1) Zero or more whitespace characters (which are discarded);
   <dd>(2) An optional + or - sign.
   <dd>(3) A sequence of digits that form the actual integer.
       There may be a non-digit delimiter after the integer, or the
       end-of-file may appear after the integer. The delimiter (or EOF)
       is not read.
 <dt><b>Conversion:</b> The above items are converted to an integer value 
   using <CODE>Integer.parseInt</CODE>.
 <dt><b>Format Problems:</b><dd>
   If a <CODE>NumberFormatException</CODE>
   occurs, then the method returns <CODE>Integer.MIN_VALUE</CODE> and an
   immediate activation of <CODE>isFormatProblem()</CODE> will return true.</DL>
</DD>
</DL>
<HR>

<A NAME="intInputLine()"><!-- --></A><H3>
intInputLine</H3>
<PRE>
public int <B>intInputLine</B>()</PRE>
<DL>
<DD>Read an integer from a complete line of this <CODE>EasyReader</CODE>.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>-</CODE> - none
<DT><B>Returns:</B><DD>an integer that's been read
 <dt><b>Note:</b><dd>
   This method is indentical <CODE>intInput( )</CODE> with an added
   activation of <CODE>skipLine( )</CODE> just before returning.</DL>
</DD>
</DL>
<HR>

<A NAME="intQuery(java.lang.String)"><!-- --></A><H3>
intQuery</H3>
<PRE>
public int <B>intQuery</B>(java.lang.String&nbsp;prompt)</PRE>
<DL>
<DD>Print a prompt, then read and return an integer from this
 <CODE>EasyReader</CODE>.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE><CODE>prompt</CODE></CODE> - a prompt to print
 <dt><b>Postcondition:</b><dd>
   The prompt has been printed to <CODE>System.out</CODE>. Then an
   integer has been read and returned with <CODE>intInputLine</CODE>.
 <dt><b>Format Problems:</b><dd>
   If <CODE>intInputLine</CODE> encounters a format problem, but
   <CODE>!isEOF()</CODE>, then the user is prompted to type a new
   input line until a correct int value is provided. If end-of-file
   is reached, then the method returns <CODE>Integer.MIN_VALUE</CODE>
   and an immediate activation of <CODE>isFormatProblem()</CODE> will return 
   true.</DL>
</DD>
</DL>
<HR>

<A NAME="isEOF()"><!-- --></A><H3>
isEOF</H3>
<PRE>
public boolean <B>isEOF</B>()</PRE>
<DL>
<DD>Determine whether this <CODE>EasyReader</CODE> has reached the 
 end-of-file.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>-</CODE> - none
<DT><B>Returns:</B><DD>If this <CODE>EasyReader</CODE> has reached the end of file 
   (reading all characters up to but not including EOF), then the return
   value is true; if an attempt to read causes an <CODE>IOException,</CODE>
   then the return value is also
   true; otherwise the return value is false.
 <dt><b>Note:</b><dd>
   A user at the keyboard indicates EOF for standard input by typing 
   ctrl-z (MS Windows) or ctrl-c (Unix). For an interactive user, this
   method does pause until the
   user provides some input or indicates end-of-file by pressing ctrl-z.
 <dt><b>Example:</b><dd>
   Read one integer per line from standard input until EOF, then print
   the sum of all the integers:
   <CODE>
   <br> EasyReader stdin = new EasyReader(System.in);
   <br> int sum = 0;
   <br> System.out.println("Type one int per line & press ctrl-z to end:");
   <br> while (!stdin.isEOF( ))
   <br>    sum += stdin.intInputLine( );
   <br> System.out.println("Total sum: " + sum);
   </CODE></DL>
</DD>
</DL>
<HR>

<A NAME="isEOLN()"><!-- --></A><H3>
isEOLN</H3>
<PRE>
public boolean <B>isEOLN</B>()</PRE>
<DL>
<DD>Determine whether the next input character is an end-of-line.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>-</CODE> - none
<DT><B>Returns:</B><DD>If the next input character is a newline ('\n') or carriage return
   ('\r'), then the return value is true; if <CODE>isEOF()</CODE>, then the
   return value is also true; if an attempt to read causes an 
   <CODE>IOException</CODE>, then
   the return value is also true; otherwise the return value is false.</DL>
</DD>
</DL>
<HR>

<A NAME="isFormatProblem()"><!-- --></A><H3>
isFormatProblem</H3>
<PRE>
public boolean <B>isFormatProblem</B>()</PRE>
<DL>
<DD>Determine whether there was an incorrectly formatted input to the most
 recent input operation.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>-</CODE> - none
<DT><B>Returns:</B><DD>A true return value indicates that the most recent activation of an
   input methods had an IOException OR was given input of the wrong form 
   (such as "abc" instead of an integer). Note that the return value is
   applicable to only the MOST RECENT activation of these input methods:
   <CODE>
   <br> doubleInput,     intInput
   <br> doubleInputLine, intInputLine
   <br> doubleQuery,     intQuery
   </CODE></DL>
</DD>
</DL>
<HR>

<A NAME="pause(long)"><!-- --></A><H3>
pause</H3>
<PRE>
public static void <B>pause</B>(long&nbsp;milliseconds)</PRE>
<DL>
<DD>Make the computation pause for a specified number of milliseconds.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE><CODE>milliseconds</CODE></CODE> - the number of milliseconds to pause
 <dt><b>Postcondition:</b><dd>
   The computation has paused for the specified time.</DL>
</DD>
</DL>
<HR>

<A NAME="peek()"><!-- --></A><H3>
peek</H3>
<PRE>
public char <B>peek</B>()</PRE>
<DL>
<DD>Peek ahead at the next character from this <CODE>EasyReader</CODE>
 (but don't read it).
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>-</CODE> - none
<DT><B>Returns:</B><DD>The return value is the next character that will be read from this
   <CODE>EasyReader</CODE>. If there is no next character (because of 
   the end-of-file marker), then the return value is '\0'.</DL>
</DD>
</DL>
<HR>

<A NAME="query(java.lang.String)"><!-- --></A><H3>
query</H3>
<PRE>
public boolean <B>query</B>(java.lang.String&nbsp;prompt)</PRE>
<DL>
<DD>Print a prompt, then read and return a YES/NO answer from this
 <CODE>EasyReader</CODE>.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE><CODE>prompt</CODE></CODE> - a prompt to print
 <dt><b>Postcondition:</b><dd>
   <CODE>stringQuery(prompt)</CODE> has been called to ask a question
   and read the answer, which is considered true if it begins with
   "Y" or "y" and false if it begins with "N" or "n". If the answer did
   not begin with a lower- or upper-case Y or N, then the process is 
   repeated until a correct Yes/No answer is provided. If EOF is reached,
   then false is returned.</DL>
</DD>
</DL>
<HR>

<A NAME="skipLine()"><!-- --></A><H3>
skipLine</H3>
<PRE>
public void <B>skipLine</B>()</PRE>
<DL>
<DD>Read and discard the rest of the current input line.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>-</CODE> - none
 <dt><b>Postcondition:</b><dd>
   Characters have been read and discarded up to and including the end of
   the current input line (or to the end-of-file).</DL>
</DD>
</DL>
<HR>

<A NAME="stringInput()"><!-- --></A><H3>
stringInput</H3>
<PRE>
public java.lang.String <B>stringInput</B>()</PRE>
<DL>
<DD>Read a <CODE>String</CODE> (up to whitespace) from this 
 <CODE>EasyReader</CODE>.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>-</CODE> - none
<DT><B>Returns:</B><DD>a <CODE>String</CODE> that's been read
 <dt><b>Format:</b>
   Whitespace has been skipped, and then a string has been read
   up to but not including the next whitespace character.</DL>
</DD>
</DL>
<HR>

<A NAME="stringInputLine()"><!-- --></A><H3>
stringInputLine</H3>
<PRE>
public java.lang.String <B>stringInputLine</B>()</PRE>
<DL>
<DD>Read a <CODE>String</CODE> from a complete line of this 
 <CODE>EasyReader</CODE>.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>-</CODE> - none
<DT><B>Returns:</B><DD>a <CODE>String</CODE> that's been read
 <dt><b>Format:</b>
   An entire line of characters has been read up to and including the end
   of the current line (or the end-of-file). All characters before the
   end are returned in a <CODE>String</CODE>.</DL>
</DD>
</DL>
<HR>

<A NAME="stringQuery(java.lang.String)"><!-- --></A><H3>
stringQuery</H3>
<PRE>
public java.lang.String <B>stringQuery</B>(java.lang.String&nbsp;prompt)</PRE>
<DL>
<DD>Print a prompt, then read and return a <CODE>String</CODE> from this
 <CODE>EasyReader</CODE>.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE><CODE>prompt</CODE></CODE> - a prompt to print
 <dt><b>Postcondition:</b><dd>
   The prompt has been printed to <CODE>System.out</CODE>. Then a
   <CODE>String</CODE> has been read and returned with 
   <CODE>stringInputLine</CODE>.</DL>
</DD>
</DL>
<HR>

<A NAME="main(java.lang.String[])"><!-- --></A><H3>
main</H3>
<PRE>
public static void <B>main</B>(java.lang.String[]&nbsp;args)</PRE>
<DL>
<DD>A demonstration program.
 To run the demonstration: 
 <BR><CODE>java edu.colorado.io.EasyReader</CODE>
<P>
<DD><DL>
</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;<A HREF="../../../edu/colorado/io/FormatWriter.html" title="class in edu.colorado.io"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?edu/colorado/io/EasyReader.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="EasyReader.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
